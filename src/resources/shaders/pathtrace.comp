#version 460

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba32f) uniform image2D ptOutput;
layout (rg16f) uniform image2D cameraVelocityTex;

uniform sampler3D cloudNoiseTex;

uniform mat4 cameraProjectionMatrix;
uniform mat4 cameraViewMatrix;
uniform mat4 cameraProjectionMatrixInverse;
uniform mat4 cameraViewMatrixInverse;

uniform mat4 previousCameraProjectionMatrixInverse;
uniform mat4 previousCameraViewMatrixInverse;

uniform vec3 cameraPosition;
uniform vec3 previousCameraPosition;

uniform float currentFrame;

#include "lib/utility.glsl"
#include "lib/intersections.glsl"

vec2 Rand(vec2 n) { 
	return vec2(
        fract(sin(dot(n + fract(currentFrame), vec2(12.9898, 4.1414))) * 43758.5453),
        fract(cos(dot(n - fract(currentFrame), vec2(12.9898, 4.1414))) * 43758.5453)
    );
}

void CompareHitData(inout HitData hitData, HitData newHitData) {
    if (abs(newHitData.t) < abs(hitData.t) && newHitData.rayHit) hitData = newHitData;
}

void RayTrace(out HitData hitData, const vec3 rayOrigin, const vec3 rayDirection) {
    Material planeMaterial = emptyMaterial;
    planeMaterial.albedo = vec3(1.0f, 1.0f, 1.0f);
    planeMaterial.emissivity = 0.0f;
    planeMaterial.isEmissive = false;

    Material emitterMaterial = emptyMaterial;
    emitterMaterial.albedo = vec3(1.0f, 1.0f, 1.0f);
    emitterMaterial.emissivity = 5.0f;
    emitterMaterial.isEmissive = true;

    hitData = emptyHitData;
    HitData hitDataTemp = emptyHitData;
    IntersectPlane(hitDataTemp, planeMaterial, vec3(0.0f, -1.0f, 0.0f), vec3(0.0f, 1.0f, 0.0f), rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    IntersectPlane(hitDataTemp, planeMaterial, vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, -1.0f, 0.0f), rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(1.0f, 0.0f, 0.0f);
    IntersectPlane(hitDataTemp, planeMaterial, vec3(-1.0f, 0.0f, 0.0f), vec3(1.0f, 0.0f, 0.0f), rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(0.0f, 1.0f, 0.0f);
    IntersectPlane(hitDataTemp, planeMaterial, vec3(1.0f, 0.0f, 0.0f), vec3(-1.0f, 0.0f, 0.0f), rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(1.0f);
    IntersectPlane(hitDataTemp, planeMaterial, vec3(0.0f, 0.0f, -1.0f), vec3(0.0f, 0.0f, 1.0f), rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(1.0f);
    IntersectSphere(hitDataTemp, planeMaterial, vec3(-0.5f, -0.66f, 0.5f), 0.33f, rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(1.0f);
    IntersectSphere(hitDataTemp, planeMaterial, vec3(0.00f, -0.66f, 0.0f), 0.33f, rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(1.0f);
    IntersectSphere(hitDataTemp, planeMaterial, vec3(0.5f, -0.66f, 0.5f), 0.33f, rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);

    hitDataTemp = emptyHitData;
    planeMaterial.albedo = vec3(1.0f);
    planeMaterial.isMetal = true;
    IntersectDisk(hitDataTemp, planeMaterial, vec3(0.0, -0.8, 2.0f), 0.2f, vec3(0.0f, 0.0f, -1.0f), rayOrigin, rayDirection);
    hitDataTemp.hitNormal.x += 0.2 * sin(distance(hitDataTemp.hitPos.xy, vec2(0.0, -0.8)) * 100);
    hitDataTemp.hitNormal = normalize(hitDataTemp.hitNormal); 

    CompareHitData(hitData, hitDataTemp);

    IntersectDisk(hitDataTemp, emitterMaterial, vec3(0.0f, 0.99f, 0.0f), 0.5f, vec3(0.0f, -1.0f, 0.0f), rayOrigin, rayDirection);
    CompareHitData(hitData, hitDataTemp);
}

void RayTraceScene(out HitData hitData, const vec3 rayOrigin, const vec3 rayDirection) {
    RayTrace(hitData, rayOrigin, rayDirection);

    if (hitData.material.isMetal) {
        RayTrace(hitData, hitData.hitPos + vec3(0.0001) * hitData.hitNormal, reflect(rayDirection, hitData.hitNormal));
    }

    /*if (hitData.material.isMetal) {
        RayTrace(hitData, hitData.hitPos - vec3(0.01) * hitData.hitNormal, refract(rayDirection, hitData.hitNormal, 1.0 / 1.450));

        if (hitData.material.isMetal) {
            RayTrace(hitData, hitData.hitPos + vec3(0.01) * hitData.hitNormal, refract(rayDirection, -hitData.hitNormal, 1.450));
        }
    }*/
}

vec3 CalculateCameraRayDir(const vec2 nCoord, const mat4 projectionMatrixInverse, const mat4 viewMatrixInverse) {
    vec3 rayDir = vec3(nCoord, 1.0) * 2.0 - 1.0;
    vec4 tmp = projectionMatrixInverse * vec4(rayDir, 1.0);
         rayDir = tmp.xyz / tmp.w;
         rayDir = mat3(viewMatrixInverse) * rayDir;
         rayDir = normalize(rayDir);
    
    return rayDir;
}

void WriteCameraVelocity(const ivec2 iPos, const HitData current, const HitData previous) {
    vec4 delta = vec4(current.hitPos - previous.hitPos - cameraPosition, 1.0);
         delta = cameraProjectionMatrix * cameraViewMatrix * delta;
         delta.xyz /= delta.w;
         delta.xyz = delta.xyz * 0.5 + 0.5;
    
    imageStore(cameraVelocityTex, iPos, vec4(abs(delta.xy), 0.0, 0.0));
}

void main() {
    ivec2 iPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 nCoord = (iPos + 0.5) / (gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec3 rayDir = CalculateCameraRayDir(nCoord, cameraProjectionMatrixInverse, cameraViewMatrixInverse);
    vec3 previousRayDir = CalculateCameraRayDir(nCoord, previousCameraProjectionMatrixInverse, previousCameraViewMatrixInverse);

    HitData hitData = emptyHitData;
    HitData previousHitData = emptyHitData;
    
    // Camera Ray 
    RayTraceScene(hitData, cameraPosition, rayDir);
    RayTraceScene(previousHitData, previousCameraPosition, previousRayDir);

    WriteCameraVelocity(iPos, hitData, previousHitData);

    vec3 sceneColor = hitData.material.emissivity * hitData.material.albedo;

    vec3 randomDir = UniformSampleHemisphere(hitData.hitNormal, Rand(nCoord));

    // TODO: Path trace recursively, manually adding bounces isn't the cleanest approach
    HitData randomHit = emptyHitData;
    RayTraceScene(randomHit, hitData.hitPos + hitData.hitNormal * 0.001f, randomDir);

    if (hitData.rayHit && !hitData.material.isEmissive) {
        if (randomHit.rayHit && randomHit.material.isEmissive) {
            sceneColor += hitData.material.albedo * randomHit.material.emissivity * randomHit.material.albedo * dot(hitData.hitNormal, randomDir) * 2.0f; 
            imageStore(ptOutput, iPos, vec4(sceneColor, 1.0));
            return;
        }

        vec3 randomDir2 = UniformSampleHemisphere(randomHit.hitNormal, Rand(nCoord * 2));

        HitData randomHit2 = emptyHitData;
        RayTraceScene(randomHit2, randomHit.hitPos + randomHit.hitNormal * 0.001f, randomDir2);

        if (randomHit.rayHit && !randomHit.material.isEmissive) {
            vec3 contrib = randomHit.material.albedo * randomHit2.material.emissivity * randomHit2.material.albedo * dot(randomHit.hitNormal, randomDir2) * 2.0f; 
            sceneColor += hitData.material.albedo * 2.0f * contrib * dot(hitData.hitNormal, randomDir); 
        }
    }

    imageStore(ptOutput, iPos, vec4(sceneColor, 1.0));
}