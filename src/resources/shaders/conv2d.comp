#version 460

layout (local_size_x = 3, local_size_y = 3, local_size_z = 3) in;
layout (r32f) uniform image3D outputTex;

uniform sampler3D inputTex;
uniform sampler3D kernelTex;
uniform sampler3D biasTex;

float sampleKernel(ivec4 coord, int inLayers, int outLayers) {
    int flatIndex = coord.z * outLayers + coord.w;  
    return texelFetch(kernelTex, ivec3(coord.xy, flatIndex), 0).r;
}

void main() {
    ivec3 iPos = ivec3(gl_GlobalInvocationID);

    if (any(greaterThanEqual(iPos, imageSize(outputTex)))) return;

    int inLayers = textureSize(inputTex, 0).z;
    int outLayers = imageSize(outputTex).z;

    float sum = 0.0;

    ivec2 offsets[9] = {
        ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1),
        ivec2(-1, 0), ivec2(0, 0), ivec2(1, 0),
        ivec2(-1, 1), ivec2(0, 1), ivec2(1, 1)
    };    

    // Convolve. Hardcoded to a 3x3 kernel for now.
    for (int i = 0; i < inLayers; i++) {    
        for (int k = 0; k < 9; k++) {
            float kernel_value = sampleKernel(ivec4(offsets[k] + ivec2(1), i, iPos.z), inLayers, outLayers);
            sum += texelFetch(inputTex, ivec3(iPos.xy + offsets[k], i), 0).r * kernel_value;
        }
    }

    sum += texelFetch(biasTex, ivec3(0, 0, iPos.z), 0).r;

    imageStore(outputTex, iPos, vec4(sum, 0.0, 0.0, 1.0));
}
