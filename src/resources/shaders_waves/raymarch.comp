#version 460

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (rgba8) uniform image2D imageOut;

uniform sampler3D propagationVolume;

uniform mat4 cameraProjectionMatrix;
uniform mat4 cameraProjectionMatrixInverse;
uniform mat4 cameraViewMatrix;
uniform mat4 cameraViewMatrixInverse;

uniform vec3 cameraPosition;

uniform float currentFrame;

float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

vec3 colorMapReal(float magnitude) {
    return vec3(-1.0, 0.0, 0.0) * min(magnitude, 0.0) + vec3(0.0, 1.0, 0.0) * max(magnitude, 0.0);
}

vec3 colorMapImaginary(float magnitude) {
    return vec3(-1.0, -1.0, 0.0) * min(magnitude, 0.0) + vec3(0.0, 0.0, 1.0) * max(magnitude, 0.0);
}

vec3 raymarchCube(const vec3 rayDir, const float dither) {
    const float marchDist = 3.0;
    const int steps = 64;

    vec3 rayIncrement = rayDir * (marchDist / steps);
    vec3 rayPosition = cameraPosition + rayIncrement * dither;

    vec3 colorSum = vec3(0.0);

    for (int i = 0; i < steps; i++, rayPosition += rayIncrement) {
        if (clamp(rayPosition, vec3(0.0), vec3(1.0)) != rayPosition) {
            continue;
        }

        float x1 = -distance(rayPosition, vec3(0.5, 0.25, 0.5));
        float x2 = -distance(rayPosition, vec3(0.5, 0.75, 0.5));
        const float k = 20.0;
        const float omega = 10;
        float waveReal = sin(omega * currentFrame + k * x1) + sin(omega * currentFrame + k * x2);
        float waveImg = cos(omega * currentFrame + k * x1) + cos(omega * currentFrame + k * x2);
        colorSum += colorMapReal(waveReal) + colorMapImaginary(waveImg) * 0.0;
    }   

    return colorSum * (marchDist / steps);
}

void main() {
    ivec2 iPos = ivec2(gl_GlobalInvocationID.xy);
    vec2 nCoord = (iPos + 0.5) / (gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    vec3 rayDir = vec3(nCoord, 1.0) * 2.0 - 1.0;
    vec4 tmp = cameraProjectionMatrixInverse * vec4(rayDir, 1.0);
         rayDir = tmp.xyz / tmp.w;
         rayDir = mat3(cameraViewMatrixInverse) * rayDir;
         rayDir = normalize(rayDir);
    
    float rng = rand(iPos);

    vec3 color = raymarchCube(rayDir, rng);

    // color = colorMap(texture(propagationVolume, vec3(nCoord, 0.5)).r

    // float x1 = -distance(nCoord, vec2(0.0, 0.55));
    // float x2 = -distance(nCoord, vec2(0.0, 0.45));
    // const float k = 200.0;
    // const float omega = 10;
    // float wave = sin(omega * currentFrame + k * x1) + sin(omega * currentFrame + k * x2);
    // color = colorMapReal(wave) * 0.5;

    // color = color / (color + 1.0);
    // color = pow(color, vec3(1.0 / 2.2));

    imageStore(imageOut, iPos, vec4(color, 1.0));
}